apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//编译kotlin代码
apply plugin: 'kotlin-kapt'
apply from: "../common_config_build.gradle"

//使用插件applifecycle
apply plugin: 'com.hm.plugin.lifecycle'

apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    defaultConfig {
        applicationId "com.example.android.study"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        resConfig "zh-rCN"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                print(project.getName())
                includeCompileClasspath true
            }
        }

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//            abiFilters 'armeabi-v7a'
        }

        manifestPlaceholders = [
                BUS_SUPPORT_MULTI_APP  : true,// 是否支持跨App
                BUS_MAIN_APPLICATION_ID: applicationId // 肯定会被安装的主app的applicationId
        ]
    }

    //使用Kotlin实验特性
    androidExtensions {
        experimental = true
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
        preDexLibraries = false
        additionalParameters = [
                '--multi-dex',//多分包
                '--set-max-idx-number=60000'//每个包内方法数上限
        ]
    }

    //dataBinding
    buildFeatures {
        dataBinding = true
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->

                    if (System.getenv("JENKINS_BUILD") == "1") {
                        variant.packageApplicationProvider.get().outputDirectory = new File("build/outputs/apk")
                    }
                    if (outputFile.name.contains("debug")) {
                        outputFileName = "android-${variant.productFlavors[0].name}apk-debug-v${variant.versionName}-${getCurrentTime()}.apk"
                    }
                    if (outputFile.name.contains("release")) {
                        outputFileName = "android-${variant.productFlavors[0].name}apk-release-v${variant.versionName}-${getCurrentTime()}.apk"
                    }

            }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
//        implementation project(":module_home")
//        implementation project(":module_mine")
//        implementation project(":module_scan")
    }

    implementation project(":CommonRes")
    implementation project(":CommonService")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    //test
    testImplementation rootProject.ext.dependencies["junit"]
//    debugImplementation rootProject.ext.dependencies["canary-debug"]
    kapt rootProject.ext.dependencies["arouter-compiler"]
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    kapt 'com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-compiler:1.0.4'
    kapt "androidx.room:room-compiler:2.2.5"

}

repositories {
    mavenCentral()
}

static def getCurrentTime() {
    return new Date().format("yyyy-MM-dd")
}